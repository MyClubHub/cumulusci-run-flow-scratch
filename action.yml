name: Execute CumulusCI Flow
description: 'Execute a named CumulusCI flow'
inputs:
  cumulusci-version:
    description: 'version of CumulusCI to install'
    required: true
    default: '3.60.0'
  sfdx-version:
    description: 'version of SFDX to install'
    required: true
    default: '7.154.0'
  dev-hub-auth-url:
    description: 'SFDX auth URL for the Dev Hub'
    required: false
  org-name:
    description: 'Name of the scratch org or persistent org config to use'
    required: true
  flow-name:
    description: 'Name of the CumulusCI flow to execute'
    required: true
  commit-status-name:
    description: 'Name of an extra commit status to set'
    required: false
    default: 
  commit-status-regex:
    description: 'Regex to apply to flow log to locate commit status value'
    required: false
    default:
  commit-status-description-prefix:
    description: 'Value to prefix before regex result in commit status value'
    required: false
    default:
runs:
    using: "composite"
    steps:
      - name: Set Up CumulusCI
        uses: cumulusci-actions/setup-cumulus
        with:
          cumulusci-version: ${{ inputs.cumulusci-version }}
          sfdx-version: ${{ inputs.sfdx-version }}
      - name: Authenticate to Dev Hub
        if: ${{ inputs.dev-hub-auth-url }}
        run: |
          echo '${{ inputs.dev-hub-auth-url }}' > sfdx_auth
          sfdx force:auth:sfdxurl:store -f sfdx_auth -d
          rm sfdx_auth
        shell: bash
      - name: Run Flow
        env:
          CUMULUSCI_SERVICE_github: '{"username": "${{ github.actor }}", "token": "${{ github.token }}", "email": "cci@github.actions" }'
        run: |
          cci flow run ${{ inputs.flow-name }} --org ${{ inputs.org-name }} | tee cumulusci-flow.log
        shell: bash
      - name: Set Commit Status
        if: ${{ inputs.commit-status-regex && inputs.commit-status-name }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          STATUS=$(cat cumulusci-flow.log | grep -o '${{ inputs.commit-status-regex }}')
          gh api \
            --method POST \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -f state='success' \
            -f description="${{ inputs.commit-status-description-prefix }}$STATUS" \
            -f context='${{ inputs.commit-status-name }}'
        shell: bash
      - name: Delete Scratch Org
        if: ${{ always() }}
        run: |
          cci org scratch_delete ${{ inputs.org-name }}
        shell: bash
